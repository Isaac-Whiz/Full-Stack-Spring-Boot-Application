name: CD - Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - backend/**
jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15.4
        env:
          POSTGRES_USER: whiz
          POSTGRES_PASSWORD: isaacwhiz
          POSTGRES_DB: full_stack
        ports:
          - 2001:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - name: Slack commit message and sha
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"https://github.com/Isaac-Whiz/Full-Stack-Spring-Boot-Application/commit/${{ github.sha }} - ${{ github.event.head_commit.message }}"}'
          ${{secrets.SLACK_WEBHOOK_URL}}
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Docker image build preparation
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"Logging into docker for image build :docker: :login:"}'
          ${{secrets.SLACK_WEBHOOK_URL}}
      - name: Login into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Set builder number
        id: build-number
        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT
      - name: Build Package and Push with Maven
        run: mvn -ntp -B verify -Ddocker.image.tag=${{steps.build-number.outputs.BUILD_NUMBER}} jib:build
      - name: Update Dockerrun.aws.json api image tag with new build number
        run: |
          echo "Dockerrun.aws.json before updating the tag"
          cat Dockerrun.aws.json
          sed -i -E 's_(isaacwhiz/whiz-api:)([^"]*)_\1'${{steps.build-number.outputs.BUILD_NUMBER}}'_' Dockerrun.aws.json
          echo "Dockerrun.aws.json after updating the tag"
          cat Dockerrun.aws.json
      - name: Send docker image deployment message
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"Docker image deployment success :link-success:"}'
          ${{secrets.SLACK_WEBHOOK_URL}}
      - name: EB deployment preparation
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"AWS deployment preparation :aws_eb: :aws:"}'
          ${{secrets.SLACK_WEBHOOK_URL}}
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
          version_label: ${{ steps.build-number.outputs.BUILD_NUMBER }}
          version_description: ${{ github.SHA }}
          region: ${{ secrets.EB_REGION }}
          deployment_package: backend/Dockerrun.aws.json
      - name: Send EB deployment success message
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"EB deployment success :aws: :success:}'
          ${{secrets.SLACK_WEBHOOK_URL}}
      - name: About to commit changes to github
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"Git push preparation"}'
          ${{secrets.SLACK_WEBHOOK_URL}}
      - name: Commit and push Dockerrun.aws.json
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Updated Dockerrun.aws.json docker image with image tag ${{steps.build-number.outputs.BUILD_NUMBER}}"
          git push
      - name: Send final deployment message
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"Docker image deployed successfully, AWS EB deployment success, Git push success :finish-line: :smart: :cool-doge:"}'
          ${{secrets.SLACK_WEBHOOK_URL}}

          
